# -*- python -*-

import os
import sys
import re
from pathlib import Path

from SCons.Script import Export, Environment, Alias, SConscript
from SCons.Script import Builder, Mkdir, BoolVariable

# This is for building in the RAF source tree.  When building standalone,
# site_scons is checked out directly into this directory (or else into
# ~/.scons/site_scons) and that takes precedence.
sys.path.append(os.path.abspath("../../caledit/site_scons"))
import eol_scons

env = Environment(tools=['default', 'netcdfcxx', 'postgres_pq',
                         'boost_date_time', 'postgres_testdb',
                         'prefixoptions', 'jlocal', 'testing'])


vars = eol_scons.GlobalVariables()
vars.Add(BoolVariable('with_python', "Enable the python wrapper module.",
                      False))
vars.Add('PYTHON', "Path to python executable.", "python3")
vars.Update(env)

build_python_module = env.get('with_python', False)


def actrack(env):
    # Tool to configure the library build.  The actrack library itself is
    # not included to make it possible to link against different build
    # variants.
    env.Require(['netcdfcxx', 'postgres_pq', 'boost_date_time'])
    if env.Dir('.').get_abspath().endswith('sanitized'):
        env.SanitizeAddress()
    elif env.Dir('.').get_abspath().endswith('clang'):
        env['CC'] = os.environ.get('CC', env['CC'])
        env['CXX'] = os.environ.get('CXX', env['CXX'])


Export('actrack')

(libactrack, actrackkml, actrackx) = SConscript('SConscript')
libactrackpub = libactrack
env.Default(actrackkml)
env.Default(actrackx)

Alias('install', env.Install('$JLOCAL/bin', 'acTrack2kml'))

rootenv = env

# ----------------------------------------------------------------------------
# Python module
# ----------------------------------------------------------------------------

if build_python_module:
    env = env.Clone()
    env.Append(LIBS=libactrack)
    env.Require('actrack')
    env.Require('boost_python')

    module = env.SharedLibrary(env.File('raf/actrack/_actrack.so'),
                               ['actrack_python.cc'])
    # I don't know why this Depends() is necessary, but the library does not
    # get rebuilt without it.  SCons may not realize that the static
    # libactrack.a is a LIBS dependency even though the target is a shared
    # library.
    env.Depends(module, libactrackpub)
    pysrcs = env.Split("raf/actrack/__init__.py")

# ----------------------------------------------------------------------------
# Testing
# ----------------------------------------------------------------------------

env = Environment(tools=['default', 'actrack', 'postgres_testdb', 'testing',
                         'datafilecache'])

env['ACTRACKOPTS'] = '--path timestep'

# Testing uses instrumented code, unless instrumenting not supported.
if hasattr(env, 'SanitizeAddress'):
    (libactrack, actrackkml, actrackx) = SConscript('SConscript',
                                                    variant_dir='sanitized',
                                                    duplicate=0)

# Clang analysis works by running the scons build under the scan-build
# program, which replaces the CC and CXX environment variables with the
# paths to the clang analyzer executables.  So if CC is not set in the
# environment to one of those executables, then we are not really set up to
# run a clang analysis.  Someday this should be part of a clang analyzer
# scons tool.  Maybe the CC and CXX paths should be overridden by the tool,
# rather than requiring the use of scan-build, but I think scan-build also
# sets up other artifacts like the reports directory.
if env.Detect('scan-build') and os.environ.get('CC', "").endswith('analyzer'):
    (libactrack, actrackkml, actrackx) = SConscript('SConscript',
                                                    variant_dir='clang',
                                                    duplicate=1)

dfcache = env.DataFileCache()
dfcache.setPrefix('rafdata:/scr/raf_data/test_data')
dfcache.insertCachePath('~/Data/raf/test_data')


# Generate KML from a netcdf file.
def NetcdfKML(target, source, env):
    ifile = str(env.File(source[0]))
    ofile = str(env.File(target[0]))
    jfile = ""
    if len(target) > 1 and str(target[1]).endswith('.json'):
        jfile = str(env.File(target[1]))
    cmd = "${ACTRACK2KML} ${ACTRACKOPTS} %s %s %s" % (ifile, ofile, jfile)
    env.Execute(cmd)


def kml_emitter(source, target, env):
    if 'ACTRACK2KML' not in env:
        env['ACTRACK2KML'] = actrackkml[0].get_abspath()
    return (target, source + [env['ACTRACK2KML']])


env['BUILDERS']['NetcdfKML'] = Builder(action=NetcdfKML, emitter=kml_emitter)

hippopath = env.DownloadDataFile('HIPPO-2rf06.nc')
ekml = 'expected/HIPPO-2rf06.kml'
ejson = 'expected/HIPPO-2rf06.json'
akml = 'kml/HIPPO-2rf06.kml'
ajson = 'kml/HIPPO-2rf06.json'
(akml, ajson) = env.NetcdfKML([akml, ajson], hippopath)
env.Alias('asan', [akml, ajson])
env.Alias('test', env.Diff([ekml, akml]))
env.Alias('test', env.Diff([ejson, ajson]))
env.AlwaysBuild(akml)

tenv = Environment(tools=['default', 'actrack', 'testing', 'gtest_main'])
if hasattr(tenv, 'SanitizeAddress'):
    tenv.SanitizeAddress()
tenv.Append(LIBS=libactrack)
gtests = tenv.Program('gtests', ["test_track.cc"])

env.Alias('test', env.Command('gtest', gtests, "${SOURCE.abspath}"))

env['ENV']['DATA_DIR'] = hippopath.dir.get_abspath()

# renderkml uses selenium WebDriver, which must be able to find
# selenium-manager, so make sure the location of the python executable is on
# the path, on the assumption that selenium and selenium-manager have been
# installed alongside python in a Conda or Mamba environment.  Also, since
# apparently being on the PATH wasn't quite enough, hardcode the path to
# selenium-manager in the SE_MANAGER_PATH environment variable.
python = env.get('PYTHON')
if '/' in python:
    pybin = Path(python).parent.resolve()
    env.PrependENVPath('PATH', pybin)
    env['ENV']['SE_MANAGER_PATH'] = pybin.joinpath('selenium-manager')

if build_python_module:
    # test_actrack.py uses HIPPO-2rf06.nc, so make sure it is in the data
    # file cache and pass the path to it in DATA_DIR.
    runtest = env.TestRun('pytests',
                          ["raf/actrack/test_actrack.py"] + module + pysrcs +
                          [hippopath], "py.test ${SOURCE}")

pg = env.PostgresTestDB()


# Generate KML output from a database SQL file.  The source is the SQL dump
# and the target is the real-time.kml file.
def database_kml_emitter(target, source, env):
    # Turn KMLOUTPUT into a file node so we can use .dir substitution with
    # it.
    if 'KMLOUTPUT' in env:
        env['KMLOUTPUTDIR'] = str(env.File("$KMLOUTPUT").get_dir())
    return target, ["${ACTRACK2KML}"] + source


database_kml_builder = Builder(action=[
    pg.action_init,
    Mkdir("${TARGET.dir}"),
    "${SOURCES[0].abspath} ${ACTRACKOPTS} "
    "-v --once -p ${AIRCRAFT} -f ${TARGET.dir}/..",
    pg.action_destroy],
                               emitter=database_kml_emitter)

database_kml_output_builder = Builder(action=[
    pg.action_init,
    Mkdir("${KMLOUTPUTDIR}"),
    "${SOURCES[0].abspath} ${ACTRACKOPTS} "
    "-v --once -p ${AIRCRAFT} --output ${KMLOUTPUT}",
    pg.action_destroy],
                                      emitter=database_kml_emitter)

env.Append(BUILDERS={'DatabaseRealtimeKML': database_kml_builder})
env.Append(BUILDERS={'DatabaseOutputKML': database_kml_output_builder})


gvkml = env.DatabaseRealtimeKML("GV-actual/GE/real-time.kml",
                                "sql/real-time-GV.sql", AIRCRAFT='GV')
env.AlwaysBuild(gvkml)

# Only the GV SQL data has points, so add it to the test alias.  The C-130
# comparison fails because no files are generated.
#
env.Alias('test', env.Diff('testgv-kml',
                           ["GV-expected/GE/real-time.kml",
                            "GV-actual/GE/real-time.kml"]))
env.Alias('test', env.Diff('testgv-position',
                           ["GV-expected/position.json",
                            "GV-actual/position.json"]))
env.DatabaseOutputKML('kml/C130-real-time.kml', 'sql/real-time-C130.sql',
                      AIRCRAFT='C130', KMLOUTPUT="kml/C130-")

# The DLR test just makes sure it terminates and exits successfully.
dlr = env.DatabaseOutputKML('kml/DLR-real-time.kml',
                            'sql/real-time-DLR.sql',
                            AIRCRAFT='DLR', KMLOUTPUT='kml/DLR-')

rf13kml = env.DatabaseOutputKML(['kml/WINTER-rf13-real-time-timestep.kml',
                                 'kml/WINTER-rf13-real-time-headingstep.kml'],
                                'sql/real-time-WINTER-rf13.sql',
                                AIRCRAFT="C130", ACTRACK2KML=actrackx,
                                KMLOUTPUT='kml/WINTER-rf13-')

# Accumulate all the targets generated in the kml subdirectory.
kmldir = [dlr, rf13kml]

# Render the whole of RF13.
kmldir += env.Command('kml/WINTER-rf13.png', rf13kml,
                      "${PYTHON} ./renderkml.py ${SOURCES} "
                      "-77.9957,28.9685,-74.2237,37.1555 ${TARGET}")

# Render just the figure eight.
kmldir += env.Command('kml/WINTER-rf13-loop.png', rf13kml,
                      "${PYTHON} ./renderkml.py ${SOURCES} "
                      "-77.9825,34.07,-77.7403,34.1869 "
                      "${TARGET}")


def RenderNetcdf(env, ncpath, bounds):
    if isinstance(ncpath, type("")):
        ncpath = env.DownloadDataFile(ncpath)
    ncfile = os.path.basename(str(ncpath))
    (base, ext) = os.path.splitext(ncfile)
    if ext != ".nc":
        base = ncfile
    base = "kml/" + base
    kmls = [base + "-timestep.kml", base + "-headingstep.kml"]
    kmls = env.Command(kmls, [actrackx, ncpath], [
            Mkdir("kml"),
            "${SOURCES[0].abspath} ${ACTRACKOPTS} ${SOURCES[1]} %s.kml" %
            (base)])
    png = env.Command(base + '.png', kmls,
                      "${PYTHON} ./renderkml.py ${SOURCES} %s ${TARGET}" %
                      (bounds))
    return kmls + png


kmldir += RenderNetcdf(env, hippopath, "172.236,-66.0481,187.508,-43.4905")
kmldir += RenderNetcdf(env, 'HIPPO-5rf13.nc',
                       "-150.438,60.1847,-145.201,87.0433")

kmldir += RenderNetcdf(env, 'WINTERrf01.nc',
                       "-76.7107,37.0417,-71.1004,41.42")
kmldir += RenderNetcdf(env, 'WINTERrf02.nc',
                       "-85.2695,37.0526,-76.2321,40.2853")
kmldir += RenderNetcdf(env, 'WINTERrf03.nc',
                       "-76.4838,37.0583,-67.9553,42.3435")

# Generate all the .kml files as part of the test target, since they are
# quick.  The rendering (meaning the generation of all the .png files) is
# only done if explicitly requested, such as with the 'render' alias.

allkml = [kml for kml in kmldir if re.search(r'\.kml$', str(kml))]
env.Alias('test', allkml)

# Render a web page with all the WINTER tracks together.
allwinter = [kml for kml in kmldir if re.search(r'WINTER.*\.kml$', str(kml))]
winter = env.Command('kml/WINTER.png', allwinter,
                     r"${PYTHON} ./renderkml.py ${SOURCES} -86,30,-72,45 "
                     r"${TARGET}")
kmldir += env.Alias('winter', winter)

if kmldir:
    env.Alias('render', kmldir)

# The 'expected' directory is a snapshot of all the known good and expected
# output files, so we can generate test targets which compare all of them.
for kml in allkml:
    kmlname = os.path.basename(str(kml))
    env.Alias('test', env.Diff('diff-'+kmlname, ['expected/'+kmlname, kml]))

# Generate html page for comparing plots.
page = env.ImageComparisonPage()
for png in [png for png in kmldir if re.search(r'\.png', str(png))]:
    pngname = os.path.basename(str(png))
    page.addComparison("expected/"+pngname, str(png))

html = page.build(env, "tracks.html")
env.Alias('render', html)

# Convenience targets in case anyone ever wants to download and test
# against a current real-time database.
env.DumpAircraftSQL('sql/real-time-GV.sql', 'GV')
env.DumpAircraftSQL('sql/real-time-C130.sql', 'C130')
env.DumpAircraftSQL('sql/real-time-N42RF.sql', 'N42RF')
env.DumpAircraftSQL('sql/real-time-DLR.sql', 'DLR')

env.SetHelp()
